"use strict";(self.webpackChunksource_2_wiki=self.webpackChunksource_2_wiki||[]).push([[43673],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var i=t(96540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}},67579:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"FileFormats/dmx","title":"DMX","description":"Header","source":"@site/docs/FileFormats/dmx.md","sourceDirName":"FileFormats","slug":"/FileFormats/dmx","permalink":"/FileFormats/dmx","draft":false,"unlisted":false,"editUrl":"https://github.com/Source2Wiki/Source2Wiki/blob/master/docs/FileFormats/dmx.md?plain=1","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"File Formats","permalink":"/FileFormats/"},"next":{"title":"ai_addon_builder","permalink":"/Entities/ai_addon_builder"}}');var r=t(74848),o=t(28453);const s={},a="DMX",l={},d=[{value:"Header",id:"header",level:2},{value:"Encodings",id:"encodings",level:2},{value:"KeyValues2",id:"keyvalues2",level:3},{value:"Binary",id:"binary",level:3}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"dmx",children:"DMX"})}),"\n",(0,r.jsx)(n.h2,{id:"header",children:"Header"}),"\n",(0,r.jsx)(n.p,{children:"DMX files always begin with a header in this format:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.code,{children:"\x3c!-- dmx encoding [encoding name] [encoding version] format [format name] [format version] --\x3e"})}),"\n",(0,r.jsx)(n.h2,{id:"encodings",children:"Encodings"}),"\n",(0,r.jsx)(n.h3,{id:"keyvalues2",children:"KeyValues2"}),"\n",(0,r.jsx)(n.p,{children:"KeyValues2 is a ASCII encoding similar to JSON."}),"\n",(0,r.jsx)(n.h3,{id:"binary",children:"Binary"}),"\n",(0,r.jsxs)(n.p,{children:["A ",(0,r.jsx)(n.code,{children:"string"})," is a C-like null-terminated string."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cpp",children:'struct DMX {\n    string header = "\x3c!-- dmx encoding binary %i format %s %i --\x3e\\n";\n\n    // for version 9+ only, is often 0\n    int prefixElementCount;\n    Element prefixElements[prefixElementCount];\n\n    int stringCount;\n    // this contains all strings needed for the file.\n    //\n    string stringTable[];\n\n    int elementCount;\n    Element elements[elementCount];\n    Attribute attributes[elementCount];\n}\n\nstruct Element {\n    // index into the string array if version > 1\n    // else this is a null-terminated string\n    int type;\n    // index into the string array if version > 3\n    // else this is a null-terminated string\n    int name;\n    // the UUID of the element\n    char id[16];\n}\n\nstruct Attribute {\n    // index into the string array if version > 1\n    // else this is a null-terminated string\n    int name;\n    // attribute type, see the enum below.\n    char type;\n}\n\nenum AttributeType {\n    // 32-bit integer, element index\n    Element = 1,\n    // 32-bit signed integer\n    Integer = 2,\n    // 32-bit float\n    Float = 3,\n    // 8-bit boolean\n    Bool = 4,\n    // string index into the string table\n    String = 5,\n    // 32-bit length, followed by the data\n    ByteArray = 6,\n    // stored as an int, but represents a float\n    // converted to float with (this * 1000)\n    TimeSpan = 7,\n    // RGBA8 color\n    Color = 8,\n    // 32-bit floating point vector\n    Vector2 = 9,\n    // 32-bit floating point vector\n    Vector3 = 10,\n    // like Vector3, but has pitch, yaw and roll instead of x, y and z\n    QAngle = 11,\n    // 32-bit floating point vector\n    Vector4 = 12,\n    // 32-bit floating point quaternion\n    Quaternion = 13,\n    // 32-bit floating point 4x4 column major matrix\n    Matrix = 14,\n    // single byte\n    Byte = 15,\n    // 64-bit unsigned integer\n    UnsignedLong = 16,\n\n    // from 33 to 48 are array versions of these types.\n    // they are encoded the same as the byte array,\n    // with a 32-bit integer size, followed byte the data.\n}\n'})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);