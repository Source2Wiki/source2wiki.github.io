"use strict";(self.webpackChunksource_2_wiki=self.webpackChunksource_2_wiki||[]).push([[95392],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var r=t(96540);const a={},i=r.createContext(a);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),r.createElement(i.Provider,{value:n},e.children)}},70195:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Scripting/Counter-Strike 2/cs_script/examples/grenadetraining","title":"Grenade Training","description":"A training course for throwing grenades.","source":"@site/docs/Scripting/Counter-Strike 2/cs_script/examples/3-grenadetraining.mdx","sourceDirName":"Scripting/Counter-Strike 2/cs_script/examples","slug":"/Scripting/Counter-Strike 2/cs_script/examples/grenadetraining","permalink":"/Scripting/Counter-Strike 2/cs_script/examples/grenadetraining","draft":false,"unlisted":false,"editUrl":"https://github.com/Source2Wiki/Source2Wiki/blob/master/docs/Scripting/Counter-Strike 2/cs_script/examples/3-grenadetraining.mdx?plain=1","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Model Change","permalink":"/Scripting/Counter-Strike 2/cs_script/examples/mdlchange"},"next":{"title":"Traces","permalink":"/Scripting/Counter-Strike 2/cs_script/examples/trace"}}');var a=t(74848),i=t(28453);const s={},c="Grenade Training",o={},l=[];function d(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"grenade-training",children:"Grenade Training"})}),"\n",(0,a.jsx)(n.p,{children:"A training course for throwing grenades."}),"\n",(0,a.jsxs)(n.p,{children:["found at ",(0,a.jsx)(n.code,{children:"Counter-Strike Global Offensive\\content\\csgo\\maps\\editor\\zoo\\scripts\\grenadetraining.js"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'import { Entity, Instance } from "cs_script/point_script";\n\nlet Rounds = 0;\nlet Hits = 0;\nlet Target = 0;\n\nlet TargetEasy = "targetbox.ez";\nlet TargetMedium = "targetbox.med";\nlet TargetHard = "targetbox.hard";\n\nInstance.ServerCommand("sv_cheats 1");\nInstance.ServerCommand("mp_warmup_offline_enabled 1");\nInstance.ServerCommand("mp_warmup_pausetimer 1");\n\nfunction SetNextTarget() {\n    Rounds++;\n\n    Instance.EntFireAtName({ name: "worldtext.rounds", input: "SetMessage", value: Rounds });\n    Instance.EntFireAtName({ name: "cover.*", input: "Enable" });\n    Instance.EntFireAtName({ name: "tele.reset", input: "Teleport" });\n\n    // Roll 1-11, if it duplicates last value choose value 12.\n    let NewTarget = Math.floor(Math.random() * 11) + 1;\n    if (NewTarget === Target) NewTarget = 12;\n    Target = NewTarget;\n\n    let difficulty = "ez";\n    if (Rounds > 7) difficulty = "hard";\n    else if (Rounds > 4) difficulty = "med";\n\n    Instance.EntFireAtName({ name: `cover.${Target}`, input: "Disable" });\n    Instance.EntFireAtName({ name: `tele.${Target}`, input: "TeleportEntity", value: `targetbox.${difficulty}` });\n}\n\n// called if player leaves play area at any time\nInstance.OnScriptInput("ResetAndCleanUp", () => {\n    Instance.EntFireAtName({ name: "trigger.start", input: "Enable" });\n    Instance.EntFireAtName({ name: "trigger.end_early", input: "Disable" });\n    Instance.EntFireAtName({ name: "worldtext.go_here", input: "Enable" });\n    Instance.EntFireAtName({ name: "relay.start_countdown", input: "CancelPending" });\n\n    Instance.EntFireAtName({ name: "worldtext.training_countdown_dyn", input: "SetMessage", value: "3" });\n    Instance.EntFireAtName({ name: "worldtext.training_countdown_static", input: "Disable" });\n    Instance.EntFireAtName({ name: "worldtext.training_countdown_dyn", input: "Disable" });\n    Instance.EntFireAtName({ name: "board.timer", input: "Disable" });\n    Instance.EntFireAtName({ name: "board.timer", input: "ResetTimer" });\n    Instance.EntFireAtName({ name: "snd.tick", input: "StopSound" });\n    Instance.EntFireAtName({ name: "tele.reset", input: "Teleport" });\n    Instance.EntFireAtName({ name: "cover.*", input: "Enable" });\n    Instance.EntFireAtName({ name: "worldtext.hits", input: "SetMessage", value: "0" });\n    Instance.EntFireAtName({ name: "worldtext.rounds", input: "SetMessage", value: "0" });\n\n    Instance.ServerCommand("sv_infinite_ammo 0");\n    const player = Instance.GetPlayerController(0)?.GetPlayerPawn();\n    player?.DestroyWeapons();\n    Instance.ClientCommand(0, "slot3");\n});\n\nInstance.OnScriptInput("StartTraining", () => {\n    Instance.EntFireAtName({ name: "trigger.start", input: "Disable" });\n    Instance.EntFireAtName({ name: "trigger.end_early", input: "Enable" });\n    Instance.EntFireAtName({ name: "worldtext.go_here", input: "Disable" });\n    Instance.EntFireAtName({ name: "relay.start_countdown", input: "Trigger" });\n\n    Instance.ServerCommand("sv_infinite_ammo 1");\n    const player = Instance.GetPlayerController(0)?.GetPlayerPawn();\n    player?.DestroyWeapons();\n    player?.GiveNamedItem("weapon_hegrenade", true);\n\n    Rounds = 0;\n    Hits = 0;\n});\n\n// called from grenade trigger inside target area\nInstance.OnScriptInput("GrenadeHit", () => {\n    Hits++;\n    Instance.EntFireAtName({ name: "snd.hit", input: "StartSound" });\n    Instance.EntFireAtName({ name: "worldtext.hits", input: "SetMessage", value: Hits });\n    if (trackedProjectile && trackedProjectile.IsValid()) {\n        trackedProjectile.Remove();\n        trackedProjectile = undefined;\n    }\n});\n\n// called from logic_timer "board.timer", 3 sec interval\nInstance.OnScriptInput("SetNextTarget", () => {\n    if (Rounds < 10) {\n        SetNextTarget();\n    } else {\n        Instance.EntFireAtName({ name: "snd.end", input: "StartSound" });\n        Instance.EntFireAtName({ name: "board.timer", input: "Disable" });\n        Instance.EntFireAtName({ name: "board.timer", input: "ResetTimer" });\n        Instance.EntFireAtName({ name: "tele.reset", input: "Teleport" });\n        Instance.EntFireAtName({ name: "cover.*", input: "Enable" });\n    }\n});\n\n/** @type {Entity | undefined} */\nlet trackedProjectile;\n/** @type {import("cs_script/point_script").Vector} */\nlet trackedPos;\nInstance.OnGrenadeThrow(({ projectile }) => {\n    Instance.ClientCommand(0, "slot6");\n    trackedProjectile = projectile;\n    trackedPos = trackedProjectile.GetAbsOrigin();\n    Instance.SetNextThink(Instance.GetGameTime());\n});\nInstance.SetThink(() => {\n    if (trackedProjectile && trackedProjectile.IsValid()) {\n        Instance.DebugLine({ start: trackedPos, end: trackedProjectile.GetAbsOrigin(), duration: 1, color: { r: 0, g: 0, b: 255 } });\n        trackedPos = trackedProjectile.GetAbsOrigin();\n        Instance.SetNextThink(Instance.GetGameTime());\n    }\n});\n'})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);