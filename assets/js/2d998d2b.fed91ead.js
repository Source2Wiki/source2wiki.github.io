"use strict";(self.webpackChunksource_2_wiki=self.webpackChunksource_2_wiki||[]).push([[80523],{13484:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"type":"mdx","permalink":"/Entities/point_enable_motion_fixup-cs2","source":"@site/src/pages/Entities/point_enable_motion_fixup-cs2.mdx","description":"\x3c!---","frontMatter":{"hide_table_of_contents":true},"unlisted":false}');var s=n(74848),r=n(28453);const o={hide_table_of_contents:!0},a=void 0,c={},h=[];function l(e){const t={br:"br",code:"code",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"Point Entity"}),"\n",(0,s.jsx)(t.p,{children:"An entity used to move a motion-disabled prop when it enables motion. Parent this entity to the prop, and when the prop has its motion enabled, it will immediately teleport to the origin of this entity."}),"\n",(0,s.jsxs)(n,{open:!0,children:[(0,s.jsx)("summary",{children:(0,s.jsx)("h2",{children:"Keyvalues"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parent"})," (",(0,s.jsx)(t.code,{children:"parentname"}),") <",(0,s.jsx)(t.code,{children:"TargetDestination"}),">",(0,s.jsx)(t.br,{}),"\n","The name of this entity's parent in the movement hierarchy. Entities with parents move with their parent."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Parent Bone/Attachment Name"})," (",(0,s.jsx)(t.code,{children:"parentAttachmentName"}),") <",(0,s.jsx)(t.code,{children:"ParentAttachment"}),">",(0,s.jsx)(t.br,{}),"\n","The name of the bone or attachment to attach to on the entity's parent in the movement hierarchy. Use !bonemerge to use bone-merge style attachment. NOTE: If this is specified the Hammer transform will be disregarded, even if 'Use Local Transform' is NOT specified (in that case local transform will be identity)"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Use Local Transform"})," (",(0,s.jsx)(t.code,{children:"useLocalOffset"}),") <",(0,s.jsx)(t.code,{children:"Boolean"}),">",(0,s.jsx)(t.br,{}),"\n","Whether to respect the specified local offset when doing the initial hierarchical attachment to its parent."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Local Origin"})," (",(0,s.jsx)(t.code,{children:"local.origin"}),") <",(0,s.jsx)(t.code,{children:"Vector"}),">",(0,s.jsx)(t.br,{}),"\n","Offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Local Angles"})," (",(0,s.jsx)(t.code,{children:"local.angles"}),") <",(0,s.jsx)(t.code,{children:"Angle"}),">",(0,s.jsx)(t.br,{}),"\n","Angular offset in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Local Scale"})," (",(0,s.jsx)(t.code,{children:"local.scales"}),") <",(0,s.jsx)(t.code,{children:"Vector"}),">",(0,s.jsx)(t.br,{}),"\n","Scale in the local space of the parent model's attachment/bone to use in hierarchy. Not used if you are not using parent attachment."]}),"\n"]}),"\n"]})]}),"\n",(0,s.jsxs)(n,{open:!0,children:[(0,s.jsx)("summary",{children:(0,s.jsx)("h2",{children:"Inputs"})}),(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["SetParent <",(0,s.jsx)(t.code,{children:"TargetDestination"}),">",(0,s.jsx)(t.br,{}),"\n","Changes the entity's parent in the movement hierarchy."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["SetParentAttachment <",(0,s.jsx)(t.code,{children:"String"}),">",(0,s.jsx)(t.br,{}),"\n","Change this entity to attach to a specific attachment point on its parent. Entities must be parented before being sent this input. The parameter passed in should be the name of the attachment."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["SetParentAttachmentMaintainOffset <",(0,s.jsx)(t.code,{children:"String"}),">",(0,s.jsx)(t.br,{}),"\n","Change this entity to attach to a specific attachment point on it's parent. Entities must be parented before being sent this input. The parameter passed in should be the name of the attachment. The entity will maintain it's position relative to the parent at the time it is attached."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["ClearParent <",(0,s.jsx)(t.code,{children:"Void"}),">",(0,s.jsx)(t.br,{}),"\n","Removes this entity from the the movement hierarchy, leaving it free to move independently."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["FollowEntity <",(0,s.jsx)(t.code,{children:"String"}),">",(0,s.jsx)(t.br,{}),"\n","Bone merges this entity to a parent entity. Call again passing nothing to end the bone merge."]}),"\n"]}),"\n"]})]})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(96540);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);