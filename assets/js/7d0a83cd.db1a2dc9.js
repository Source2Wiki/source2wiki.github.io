"use strict";(self.webpackChunksource_2_wiki=self.webpackChunksource_2_wiki||[]).push([[90533],{18113:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>r,metadata:()=>t,toc:()=>h});const t=JSON.parse('{"id":"EngineTools/AnimgraphEditor/AnimgraphEditorNodes/Blend/aimmatrix","title":"Aim Matrix","description":"Aim Matrix.","source":"@site/docs/EngineTools/AnimgraphEditor/AnimgraphEditorNodes/Blend/aimmatrix.mdx","sourceDirName":"EngineTools/AnimgraphEditor/AnimgraphEditorNodes/Blend","slug":"/EngineTools/AnimgraphEditor/AnimgraphEditorNodes/Blend/aimmatrix","permalink":"/EngineTools/AnimgraphEditor/AnimgraphEditorNodes/Blend/aimmatrix","draft":false,"unlisted":false,"editUrl":"https://github.com/Source2Wiki/Source2Wiki/blob/master/docs/EngineTools/AnimgraphEditor/AnimgraphEditorNodes/Blend/aimmatrix.mdx?plain=1","tags":[],"version":"current","frontMatter":{"description":"Aim Matrix.","title":"Aim Matrix"},"sidebar":"tutorialSidebar","previous":{"title":"Additive Anim Node","permalink":"/EngineTools/AnimgraphEditor/AnimgraphEditorNodes/Blend/additive"},"next":{"title":"Bone Mask","permalink":"/EngineTools/AnimgraphEditor/AnimgraphEditorNodes/Blend/bonemask"}}');var s=i(74848),d=i(28453);const r={description:"Aim Matrix.",title:"Aim Matrix"},a=void 0,l={},h=[{value:"Sequence",id:"sequence",level:2},{value:"Angle Increment",id:"angle-increment",level:2},{value:"Max Yaw Angle",id:"max-yaw-angle",level:2},{value:"Max Pitch Angle",id:"max-pitch-angle",level:2},{value:"Target",id:"target",level:2},{value:"Parameter",id:"parameter",level:2},{value:"Aim Attachment",id:"aim-attachment",level:2},{value:"Blend Mode",id:"blend-mode",level:2},{value:"Reset Child",id:"reset-child",level:2},{value:"Lock Blend When Waning",id:"lock-blend-when-waning",level:2},{value:"Damping",id:"damping",level:2},{value:"Speed Function",id:"speed-function",level:3},{value:"Speed Scale",id:"speed-scale",level:3},{value:"Speed Scale (Falling)",id:"speed-scale-falling",level:3},{value:"Limit Speed",id:"limit-speed",level:3},{value:"Min Speed",id:"min-speed",level:3},{value:"Max Speed",id:"max-speed",level:3}];function o(e){const n={h2:"h2",h3:"h3",img:"img",li:"li",p:"p",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:'Treats each frame of a single animation as the pose for a direction, and will blend them to create a combined pose to "aim" the character in that given direction.\nAIM matrix sequence can be created in ModelDoc with AnimSubtract and usually subtracting the 4th frame of the animation.'}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"aimmatrix in editor",src:i(47233).A+"",title:"Aim Matrix Node in Editor",width:"557",height:"635"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"aimmatrix properties",src:i(31115).A+"",title:"Aim Matrix Node Properties",width:"608",height:"266"})}),"\n",(0,s.jsx)(n.h2,{id:"sequence",children:"Sequence"}),"\n",(0,s.jsx)(n.p,{children:"The sequence containing the aim poses in each frame.  Assumes that the frames are set up like this:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)("b",{children:"1. Bottom Left"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)("b",{children:"2. Bottom Center"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)("b",{children:"3. Bottom Right"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)("b",{children:"4. Middle Left"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)("b",{children:"5. Middle Center"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)("b",{children:"6. Middle Right"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)("b",{children:"7. Up Left"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)("b",{children:"8. Up Center"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)("b",{children:"9. Up Right"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)("b",{children:"10. Straight Up"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"angle-increment",children:"Angle Increment"}),"\n",(0,s.jsx)(n.p,{children:"The angle difference between the center pose and the outer poses.  eg: if the Angle Increment is 45, then the right pose is assumed to point 45 degrees to the right, the up pose points 45 degrees up, etc."}),"\n",(0,s.jsx)(n.h2,{id:"max-yaw-angle",children:"Max Yaw Angle"}),"\n",(0,s.jsx)(n.p,{children:"The angle difference between the center pose and the outer yaw poses.  eg: if the Max Yaw Angle is 45, then the right pose is assumed to point 45 degrees to the right."}),"\n",(0,s.jsx)(n.h2,{id:"max-pitch-angle",children:"Max Pitch Angle"}),"\n",(0,s.jsx)(n.p,{children:"The angle difference between the center pose and the outer pitch poses.  eg: if the Max Pitch Angle is 45, then the up pose is assumed to point 45 degrees upward."}),"\n",(0,s.jsx)(n.h2,{id:"target",children:"Target"}),"\n",(0,s.jsx)(n.p,{children:"The input vector that is driving the blend. What location this node should aim at?"}),"\n",(0,s.jsx)(n.h2,{id:"parameter",children:"Parameter"}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)("b",{children:"Target"})," is set to ",(0,s.jsx)("em",{children:"Position Parameter"}),", this field is the anim parameter that is driving the blend.  Note that only Vector parameters are displayed as options."]}),"\n",(0,s.jsx)(n.h2,{id:"aim-attachment",children:"Aim Attachment"}),"\n",(0,s.jsxs)(n.p,{children:["The Aim Matrix needs to know not just what to aim ",(0,s.jsx)("em",{children:"at"}),", but also where to aim ",(0,s.jsx)("em",{children:"from"}),'.  This field lets you pick an attachment that defines what this node considers "forward", and the blend of the aim frames will be made based on the direction to the target relative to this attachment.']}),"\n",(0,s.jsx)(n.h2,{id:"blend-mode",children:"Blend Mode"}),"\n",(0,s.jsx)(n.p,{children:"Defines how the blend of the frames of the aim animation are applied to the pose from the child node:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)("b",{children:"None:"})," Aim anims are used as-is and not applied on top of a base pose ",(0,s.jsx)("br",{})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)("b",{children:"Additive:"})," The aim pose is added to the base pose ",(0,s.jsx)("br",{})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)("b",{children:"Bone Mask:"})," The aim pose is blended into the base pose using a per-bone mask ",(0,s.jsx)("br",{})]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"reset-child",children:"Reset Child"}),"\n",(0,s.jsx)(n.p,{children:"Whether or not the child of this node should get reset when it does."}),"\n",(0,s.jsx)(n.h2,{id:"lock-blend-when-waning",children:"Lock Blend When Waning"}),"\n",(0,s.jsx)(n.p,{children:"Don't change the look direction if this node is blending out."}),"\n",(0,s.jsx)(n.h2,{id:"damping",children:"Damping"}),"\n",(0,s.jsx)(n.p,{children:"Controls how the output of this node is blended over time."}),"\n",(0,s.jsx)(n.h3,{id:"speed-function",children:"Speed Function"}),"\n",(0,s.jsx)(n.p,{children:"Controls how damped speed is adjusted based on how far the current value is from the target value."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)("b",{children:"No Damping:"})," Damping is not applied. ",(0,s.jsx)("br",{})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)("b",{children:"Constant:"})," The damping speed does not change with distance from the target value. ",(0,s.jsx)("br",{})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)("b",{children:"Spring:"})," A critically damped spring is used to accelerate the current value toward the target value.  The farther the current value is from the target, the more the acceleration.  However the spring will not overshoot the target value. ",(0,s.jsx)("br",{})]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)("b",{children:"Asymmetric Spring"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"speed-scale",children:"Speed Scale"}),"\n",(0,s.jsxs)(n.p,{children:["Scales the speed of the damping, or in the case of the Spring ",(0,s.jsx)("b",{children:"Speed Function"})," it controls the strength of the spring."]}),"\n",(0,s.jsx)(n.h3,{id:"speed-scale-falling",children:"Speed Scale (Falling)"}),"\n",(0,s.jsxs)(n.p,{children:["When using AsymmetricSpring for ",(0,s.jsx)("b",{children:"Speed Function"})," it controls the strength of the spring, only when damping to a lower value."]}),"\n",(0,s.jsx)(n.h3,{id:"limit-speed",children:"Limit Speed"}),"\n",(0,s.jsx)(n.p,{children:"Toggle whether or not to clamp the damping speed"}),"\n",(0,s.jsx)(n.h3,{id:"min-speed",children:"Min Speed"}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)("b",{children:"Limit Speed "}),"is set, this is the slowest speed that the dampened value can change at."]}),"\n",(0,s.jsx)(n.h3,{id:"max-speed",children:"Max Speed"}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)("b",{children:"Limit Speed "}),"is set, this is the fastest speed that the dampened value can change at."]})]})}function c(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>a});var t=i(96540);const s={},d=t.createContext(s);function r(e){const n=t.useContext(d);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(d.Provider,{value:n},e.children)}},31115:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/aimmatrix_properties-6c7b8a071301f6fc193cb63be4ddefb3.png"},47233:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/aimmatrix_image-86d14df3934c251e951ef1dc66514daf.png"}}]);