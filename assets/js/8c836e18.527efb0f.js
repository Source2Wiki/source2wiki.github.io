"use strict";(self.webpackChunksource_2_wiki=self.webpackChunksource_2_wiki||[]).push([[96247],{21082:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"type":"mdx","permalink":"/Entities/worldspawn-cs2","source":"@site/src/pages/Entities/worldspawn-cs2.mdx","description":"\x3c!---","frontMatter":{"hide_table_of_contents":true},"unlisted":false}');var r=s(74848),l=s(28453);const o={hide_table_of_contents:!0},t=void 0,a={},d=[];function c(e){const n={br:"br",code:"code",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Mesh Entity"}),"\n",(0,r.jsx)(n.p,{children:"This is the world entity. Each map can only contain one, and it's automatically created for you."}),"\n",(0,r.jsxs)(s,{open:!0,children:[(0,r.jsx)("summary",{children:(0,r.jsx)("h2",{children:"Keyvalues"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Name"})," (",(0,r.jsx)(n.code,{children:"targetname"}),") <",(0,r.jsx)(n.code,{children:"TargetSource"}),">",(0,r.jsx)(n.br,{}),"\n","The name that other entities refer to this entity by."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"SkyBox Texture Name"})," (",(0,r.jsx)(n.code,{children:"skyname"}),") <",(0,r.jsx)(n.code,{children:"String"}),">"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Level Fade In"})," (",(0,r.jsx)(n.code,{children:"startdark"}),") <",(0,r.jsx)(n.code,{children:"Boolean"}),">"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Level Fade In Color (R G B)"})," (",(0,r.jsx)(n.code,{children:"startcolor"}),") <",(0,r.jsx)(n.code,{children:"Color255"}),">"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Precomputed Visibility"})," (",(0,r.jsx)(n.code,{children:"pvstype"}),") <",(0,r.jsx)(n.code,{children:"Choices"}),">"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Disabled"}),"\n",(0,r.jsx)(n.li,{children:"Test map (open space, no skybox)"}),"\n",(0,r.jsx)(n.li,{children:"Full visibility solve"}),"\n",(0,r.jsx)(n.li,{children:"Partitioned solve (large map volume)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"New Level Unit"})," (",(0,r.jsx)(n.code,{children:"newunit"}),") <",(0,r.jsx)(n.code,{children:"Choices"}),">",(0,r.jsx)(n.br,{}),"\n","Used to clear out savegame data of previous levels to keep the savegame size as small as possible. Only set it to Yes if the player cannot return to any previous levels."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No, keep current"}),"\n",(0,r.jsx)(n.li,{children:"Yes, clear previous levels"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Start Fade Pixels"})," (",(0,r.jsx)(n.code,{children:"maxpropscreenwidth"}),") <",(0,r.jsx)(n.code,{children:"Float"}),">",(0,r.jsx)(n.br,{}),"\n","Number of pixels wide at which all props in the level start to fade (<0 = use fademaxdist). This number is ignored if the prop has a specific fade distance specified."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"End Fade Pixels"})," (",(0,r.jsx)(n.code,{children:"minpropscreenwidth"}),") <",(0,r.jsx)(n.code,{children:"Float"}),">",(0,r.jsx)(n.br,{}),"\n","Minimum number of pixels wide at which the prop is visible (0 = don't fade out). This number is ignored if the prop has a specific fade distance specified."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Maximum Lightmap Resolution"})," (",(0,r.jsx)(n.code,{children:"max_lightmap_resolution"}),") <",(0,r.jsx)(n.code,{children:"Choices"}),">"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No Maximum"}),"\n",(0,r.jsx)(n.li,{children:"512"}),"\n",(0,r.jsx)(n.li,{children:"1024"}),"\n",(0,r.jsx)(n.li,{children:"2048"}),"\n",(0,r.jsx)(n.li,{children:"4096"}),"\n",(0,r.jsx)(n.li,{children:"8192"}),"\n",(0,r.jsx)(n.li,{children:"16384"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Lightmap Queries"})," (",(0,r.jsx)(n.code,{children:"lightmap_queries"}),") <",(0,r.jsx)(n.code,{children:"Boolean"}),">",(0,r.jsx)(n.br,{}),"\n","Generates data which can be used to lookup lightmap UVs at a given position, useful for high-fidelity illumination of bullet decals on lightmapped geometry."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Rebake Option"})," (",(0,r.jsx)(n.code,{children:"steamaudio_reverb_rebake_option"}),") <",(0,r.jsx)(n.code,{children:"Choices"}),">",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)("b",{children:"Cleanup"}),": Reverb bake is disabled. Baked data will be cleaned up during map compile in Hammer or mapbuilder.",(0,r.jsx)("br",{}),(0,r.jsx)("b",{children:"Manual"}),": Reverb needs to be baked manually. Baked data is added or updated during map compile in Hammer but untouched by mapbuilder.",(0,r.jsx)("br",{}),(0,r.jsx)("b",{children:"Auto"}),": Reverb is baked automatically during map compile. Baked data is added or updated during map compile in Hammer or mapbuilder."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Cleanup"}),"\n",(0,r.jsx)(n.li,{children:"Manual"}),"\n",(0,r.jsx)(n.li,{children:"Auto"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Generation Type"})," (",(0,r.jsx)(n.code,{children:"steamaudio_reverb_generation_type"}),") <",(0,r.jsx)(n.code,{children:"Choices"}),">",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)("b",{children:"Automatic, Everywhere"}),": When baking, probes will be generated to cover the entire map.",(0,r.jsx)("br",{}),(0,r.jsx)("b",{children:"Automatic, Use Probe Generation Volumes"}),": When baking, probes will only be generated within Probe Generation Volumes that have been explicitly placed in the map.",(0,r.jsx)("br",{}),(0,r.jsx)("b",{children:"Manual"}),": When baking, probes will not be generated. Only probes that have been manually placed in the map will be used."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Automatic, Everywhere"}),"\n",(0,r.jsx)(n.li,{children:"Automatic, Use Probe Generation Volumes"}),"\n",(0,r.jsx)(n.li,{children:"Manual"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Filter Using Probe Exclusion Volumes"})," (",(0,r.jsx)(n.code,{children:"steamaudio_reverb_filter_volumes"}),") <",(0,r.jsx)(n.code,{children:"Boolean"}),">",(0,r.jsx)(n.br,{}),"\n","Don't generate probes inside Probe Exclusion Volumes that have been placed in the map.",(0,r.jsx)("br",{}),"(Only used if Generation Type is set to Automatic, Everywhere.)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Filter Using NavMesh"})," (",(0,r.jsx)(n.code,{children:"steamaudio_reverb_filter_navmesh"}),") <",(0,r.jsx)(n.code,{children:"Boolean"}),">",(0,r.jsx)(n.br,{}),"\n","Only generate probes that are near the nav mesh.",(0,r.jsx)("br",{}),"(Only used if Generation Type is set to Automatic, Everywhere.)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Grid Spacing"})," (",(0,r.jsx)(n.code,{children:"steamaudio_reverb_grid_spacing"}),") <",(0,r.jsx)(n.code,{children:"Float"}),">",(0,r.jsx)(n.br,{}),"\n","The horizontal distance (in meters) between adjacent probes."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Height Above Floor"})," (",(0,r.jsx)(n.code,{children:"steamaudio_reverb_height_above_floor"}),") <",(0,r.jsx)(n.code,{children:"Float"}),">",(0,r.jsx)(n.br,{}),"\n","The height (in meters) above the floor at which probes should be placed.."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Baking Rays"})," (",(0,r.jsx)(n.code,{children:"steamaudio_reverb_rays"}),") <",(0,r.jsx)(n.code,{children:"Integer"}),">",(0,r.jsx)(n.br,{}),"\n","The number of rays traced from the listener when baking reflections or reverb. Increasing this value results in more accurate reflections, at the cost of increased bake times."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Baking Bounces"})," (",(0,r.jsx)(n.code,{children:"steamaudio_reverb_bounces"}),") <",(0,r.jsx)(n.code,{children:"Integer"}),">",(0,r.jsx)(n.br,{}),"\n","The number of times each ray traced from the listener is reflected when baking reflections or reverb. Increasing this value results in longer, more accurate reverb tails, at the cost of increased bake times."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Baking Duration"})," (",(0,r.jsx)(n.code,{children:"steamaudio_reverb_ir_duration"}),") <",(0,r.jsx)(n.code,{children:"Float"}),">",(0,r.jsx)(n.br,{}),"\n","The duration (in seconds) of the IRs generated when baking reflections or reverb. Increasing this value results in longer, more accurate reverb tails, at the cost of increased disk space usage."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Baking Ambisonic Order"})," (",(0,r.jsx)(n.code,{children:"steamaudio_reverb_ambisonic_order"}),") <",(0,r.jsx)(n.code,{children:"Integer"}),">",(0,r.jsx)(n.br,{}),"\n","The Ambisonic order of the IRs generated when baking reflections or reverb. Increasing this value results in more accurate directional variation of reflected sound, at the cost of increased disk space usage."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Enable Clustering"})," (",(0,r.jsx)(n.code,{children:"steamaudio_reverb_clustering_enable"}),") <",(0,r.jsx)(n.code,{children:"Boolean"}),">",(0,r.jsx)(n.br,{}),"\n","Reduces the number of probes generated by combining nearby probes that are likely to have similar reverbs."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Cube Map Resolution"})," (",(0,r.jsx)(n.code,{children:"steamaudio_reverb_clustering_cubemap_resolution"}),") <",(0,r.jsx)(n.code,{children:"Integer"}),">",(0,r.jsx)(n.br,{}),"\n","Number of rays traced per side for each face of the depth cube map computed for each probe."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Depth Similarity Threshold"})," (",(0,r.jsx)(n.code,{children:"steamaudio_reverb_clustering_depth_threshold"}),") <",(0,r.jsx)(n.code,{children:"Float"}),">",(0,r.jsx)(n.br,{}),"\n","If average depth map values at two probes are within this distance (in meters), then the probes are considered similar."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Rebake Option"})," (",(0,r.jsx)(n.code,{children:"steamaudio_pathing_rebake_option"}),") <",(0,r.jsx)(n.code,{children:"Choices"}),">",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)("b",{children:"Cleanup"}),": Pathing bake is disabled. Baked data will be cleaned up during map compile in Hammer or mapbuilder.",(0,r.jsx)("br",{}),(0,r.jsx)("b",{children:"Manual"}),": Pathing needs to be baked manually. Baked data is added or updated during map compile in Hammer but untouched by mapbuilder.",(0,r.jsx)("br",{}),(0,r.jsx)("b",{children:"Auto"}),": Pathing is baked automatically during map compile. Baked data is added or updated during map compile in Hammer or mapbuilder."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Cleanup"}),"\n",(0,r.jsx)(n.li,{children:"Manual"}),"\n",(0,r.jsx)(n.li,{children:"Auto"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Generation Type"})," (",(0,r.jsx)(n.code,{children:"steamaudio_pathing_generation_type"}),") <",(0,r.jsx)(n.code,{children:"Choices"}),">",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)("b",{children:"Automatic, Everywhere"}),": When baking, probes will be generated to cover the entire map.",(0,r.jsx)("br",{}),(0,r.jsx)("b",{children:"Automatic, Use Probe Generation Volumes"}),": When baking, probes will only be generated within Probe Generation Volumes that have been explicitly placed in the map.",(0,r.jsx)("br",{}),(0,r.jsx)("b",{children:"Manual"}),": When baking, probes will not be generated. Only probes that have been manually placed in the map will be used."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Automatic, Everywhere"}),"\n",(0,r.jsx)(n.li,{children:"Automatic, Use Probe Generation Volumes"}),"\n",(0,r.jsx)(n.li,{children:"Manual"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Filter Using Probe Exclusion Volumes"})," (",(0,r.jsx)(n.code,{children:"steamaudio_pathing_filter_volumes"}),") <",(0,r.jsx)(n.code,{children:"Boolean"}),">",(0,r.jsx)(n.br,{}),"\n","Don't generate probes inside Probe Exclusion Volumes that have been placed in the map.",(0,r.jsx)("br",{}),"(Only used if Generation Type is set to Automatic, Everywhere.)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Filter Using NavMesh"})," (",(0,r.jsx)(n.code,{children:"steamaudio_pathing_filter_navmesh"}),") <",(0,r.jsx)(n.code,{children:"Boolean"}),">",(0,r.jsx)(n.br,{}),"\n","Only generate probes that are near the nav mesh.",(0,r.jsx)("br",{}),"(Only used if Generation Type is set to Automatic, Everywhere.)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Grid Spacing"})," (",(0,r.jsx)(n.code,{children:"steamaudio_pathing_grid_spacing"}),") <",(0,r.jsx)(n.code,{children:"Float"}),">",(0,r.jsx)(n.br,{}),"\n","The horizontal distance (in meters) between adjacent probes."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Height Above Floor"})," (",(0,r.jsx)(n.code,{children:"steamaudio_pathing_height_above_floor"}),") <",(0,r.jsx)(n.code,{children:"Float"}),">",(0,r.jsx)(n.br,{}),"\n","The height (in meters) above the floor at which probes should be placed.."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Baking Visibilty Samples"})," (",(0,r.jsx)(n.code,{children:"steamaudio_pathing_visibility_samples"}),") <",(0,r.jsx)(n.code,{children:"Integer"}),">",(0,r.jsx)(n.br,{}),"\n","Number of point samples to use around each probe when testing whether one probe can see another. To determine if two probes are mutually visible, rays are traced from each point sample of the first probe, to every other point sample of the second probe. Increasing this value prevents paths from being considered occluded by small objects, at the cost of increased bake times."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Baking Visibility Radius"})," (",(0,r.jsx)(n.code,{children:"steamaudio_pathing_visibility_radius"}),") <",(0,r.jsx)(n.code,{children:"Float"}),">",(0,r.jsx)(n.br,{}),"\n","When testing for mutual visibility between a pair of probes, each probe is treated as a sphere of this radius (in meters), and point samples are generated within this sphere."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Baking Visibility Threshold"})," (",(0,r.jsx)(n.code,{children:"steamaudio_pathing_visibility_threshold"}),") <",(0,r.jsx)(n.code,{children:"Float"}),">",(0,r.jsx)(n.br,{}),"\n","When tracing rays to test for mutual visibility between a pair of probes, the fraction of rays that are unoccluded must be greater than this threshold for the pair of probes to be considered mutually visible."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Baking Path Range"})," (",(0,r.jsx)(n.code,{children:"steamaudio_pathing_visibility_pathrange"}),") <",(0,r.jsx)(n.code,{children:"Float"}),">",(0,r.jsx)(n.br,{}),"\n","If the distance (in meters) between two probes is greater than this value, the probes are considered to not have any path between them. Increasing this value allows sound to propagate over greater distances, at the cost of increased bake times and memory usage."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Rebake Option"})," (",(0,r.jsx)(n.code,{children:"steamaudio_customdata_rebake_option"}),") <",(0,r.jsx)(n.code,{children:"Choices"}),">",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)("b",{children:"Cleanup"}),": Custom bake is disabled. Baked data will be cleaned up during map compile in Hammer or mapbuilder.",(0,r.jsx)("br",{}),(0,r.jsx)("b",{children:"Manual"}),": Custom data needs to be baked manually. Baked data is added or updated during map compile in Hammer but untouched by mapbuilder.",(0,r.jsx)("br",{}),(0,r.jsx)("b",{children:"Auto"}),": Custom data is baked automatically during map compile. Baked data is added or updated during map compile in Hammer or mapbuilder."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Cleanup"}),"\n",(0,r.jsx)(n.li,{children:"Manual"}),"\n",(0,r.jsx)(n.li,{children:"Auto"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Generation Type"})," (",(0,r.jsx)(n.code,{children:"steamaudio_customdata_generation_type"}),") <",(0,r.jsx)(n.code,{children:"Choices"}),">",(0,r.jsx)(n.br,{}),"\n",(0,r.jsx)("b",{children:"Automatic, Everywhere"}),": When baking, probes will be generated to cover the entire map.",(0,r.jsx)("br",{}),(0,r.jsx)("b",{children:"Automatic, Use Probe Generation Volumes"}),": When baking, probes will only be generated within Probe Generation Volumes that have been explicitly placed in the map.",(0,r.jsx)("br",{}),(0,r.jsx)("b",{children:"Manual"}),": When baking, probes will not be generated. Only probes that have been manually placed in the map will be used."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Automatic, Everywhere"}),"\n",(0,r.jsx)(n.li,{children:"Automatic, Use Probe Generation Volumes"}),"\n",(0,r.jsx)(n.li,{children:"Manual"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Filter Using Probe Exclusion Volumes"})," (",(0,r.jsx)(n.code,{children:"steamaudio_customdata_filter_volumes"}),") <",(0,r.jsx)(n.code,{children:"Boolean"}),">",(0,r.jsx)(n.br,{}),"\n","Don't generate probes inside Probe Exclusion Volumes that have been placed in the map.",(0,r.jsx)("br",{}),"(Only used if Generation Type is set to Automatic, Everywhere.)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Filter Using NavMesh"})," (",(0,r.jsx)(n.code,{children:"steamaudio_customdata_filter_navmesh"}),") <",(0,r.jsx)(n.code,{children:"Boolean"}),">",(0,r.jsx)(n.br,{}),"\n","Only generate probes that are near the nav mesh.",(0,r.jsx)("br",{}),"(Only used if Generation Type is set to Automatic, Everywhere.)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Grid Spacing"})," (",(0,r.jsx)(n.code,{children:"steamaudio_customdata_grid_spacing"}),") <",(0,r.jsx)(n.code,{children:"Float"}),">",(0,r.jsx)(n.br,{}),"\n","The horizontal distance (in meters) between adjacent probes."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Height Above Floor"})," (",(0,r.jsx)(n.code,{children:"steamaudio_customdata_height_above_floor"}),") <",(0,r.jsx)(n.code,{children:"Float"}),">",(0,r.jsx)(n.br,{}),"\n","The height (in meters) above the floor at which probes should be placed.."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Bake Occlusion"})," (",(0,r.jsx)(n.code,{children:"steamaudio_customdata_bake_occlusion"}),") <",(0,r.jsx)(n.code,{children:"Boolean"}),">",(0,r.jsx)(n.br,{}),"\n","Bake custom occlusion data between probe pairs."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Bake Dimensions"})," (",(0,r.jsx)(n.code,{children:"steamaudio_customdata_bake_dimensions"}),") <",(0,r.jsx)(n.code,{children:"Boolean"}),">",(0,r.jsx)(n.br,{}),"\n","Bake occlusion dimensions data (size and inside outside) per probe."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Bake Materials"})," (",(0,r.jsx)(n.code,{children:"steamaudio_customdata_bake_materials"}),") <",(0,r.jsx)(n.code,{children:"Boolean"}),">",(0,r.jsx)(n.br,{}),"\n","Bake custom materials data (top 3 nearby materials) per probe."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Occlusion: Simulate Pathing"})," (",(0,r.jsx)(n.code,{children:"steamaudio_customdata_occlusion_pathing"}),") <",(0,r.jsx)(n.code,{children:"Boolean"}),">",(0,r.jsx)(n.br,{}),"\n","Simulate pathing when computing baked occlusion."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Occlusion: Simulate Reflection"})," (",(0,r.jsx)(n.code,{children:"steamaudio_customdata_occlusion_reflection"}),") <",(0,r.jsx)(n.code,{children:"Boolean"}),">",(0,r.jsx)(n.br,{}),"\n","Simulate reflections when computing baked occlusion."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Occlusion: Reflection Num Rays"})," (",(0,r.jsx)(n.code,{children:"steamaudio_customdata_occlusion_reflection_rays"}),") <",(0,r.jsx)(n.code,{children:"Integer"}),">",(0,r.jsx)(n.br,{}),"\n","Number of rays to simulate reflections."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Occlusion: Reflection Bounces"})," (",(0,r.jsx)(n.code,{children:"steamaudio_customdata_occlusion_reflection_bounces"}),") <",(0,r.jsx)(n.code,{children:"Integer"}),">",(0,r.jsx)(n.br,{}),"\n","Number of bounces to simulate reflections."]}),"\n"]}),"\n"]})]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>t});var i=s(96540);const r={},l=i.createContext(r);function o(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);