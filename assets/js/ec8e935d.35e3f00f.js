"use strict";(self.webpackChunksource_2_wiki=self.webpackChunksource_2_wiki||[]).push([[22933],{14795:(e,t,n)=>{n.d(t,{A:()=>b});n(96540);var i=n(34164),o=n(26972),r=n(28774),s=n(53465),c=n(16654),a=n(21312),l=n(51107);const u={cardContainer:"cardContainer_fWXF",cardTitle:"cardTitle_rnsV",cardDescription:"cardDescription_PWke"};var d=n(74848);function m({className:e,href:t,children:n}){return(0,d.jsx)(r.A,{href:t,className:(0,i.A)("card padding--lg",u.cardContainer,e),children:n})}function p({className:e,href:t,icon:n,title:o,description:r}){return(0,d.jsxs)(m,{href:t,className:e,children:[(0,d.jsxs)(l.A,{as:"h2",className:(0,i.A)("text--truncate",u.cardTitle),title:o,children:[n," ",o]}),r&&(0,d.jsx)("p",{className:(0,i.A)("text--truncate",u.cardDescription),title:r,children:r})]})}function f({item:e}){const t=(0,o.Nr)(e),n=function(){const{selectMessage:e}=(0,s.W)();return t=>e(t,(0,a.T)({message:"1 item|{count} items",id:"theme.docs.DocCard.categoryDescription.plurals",description:"The default description for a category card in the generated index about how many items this category includes"},{count:t}))}();return t?(0,d.jsx)(p,{className:e.className,href:t,icon:"\ud83d\uddc3\ufe0f",title:e.label,description:e.description??n(e.items.length)}):null}function h({item:e}){const t=(0,c.A)(e.href)?"\ud83d\udcc4\ufe0f":"\ud83d\udd17",n=(0,o.cC)(e.docId??void 0);return(0,d.jsx)(p,{className:e.className,href:e.href,icon:t,title:e.label,description:e.description??n?.description})}function g({item:e}){switch(e.type){case"link":return(0,d.jsx)(h,{item:e});case"category":return(0,d.jsx)(f,{item:e});default:throw new Error(`unknown item type ${JSON.stringify(e)}`)}}const x={docCardListItem:"docCardListItem_W1sv"};function y({className:e}){const t=(0,o.a4)();return(0,d.jsx)(b,{items:t,className:e})}function j({item:e}){return(0,d.jsx)("article",{className:(0,i.A)(x.docCardListItem,"col col--6"),children:(0,d.jsx)(g,{item:e})})}function b(e){const{items:t,className:n}=e;if(!t)return(0,d.jsx)(y,{...e});const r=(0,o.d1)(t);return(0,d.jsx)("section",{className:(0,i.A)("row",n),children:r.map((e,t)=>(0,d.jsx)(j,{item:e},t))})}},18613:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>c,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"CommunityGuides/s2ze/PortingGuide/index","title":"Porting Guide","description":"Porting guide made for Zombie Escape maps","source":"@site/docs/CommunityGuides/s2ze/PortingGuide/index.mdx","sourceDirName":"CommunityGuides/s2ze/PortingGuide","slug":"/CommunityGuides/s2ze/PortingGuide/","permalink":"/CommunityGuides/s2ze/PortingGuide/","draft":false,"unlisted":false,"editUrl":"https://github.com/Source2Wiki/Source2Wiki/blob/master/docs/CommunityGuides/s2ze/PortingGuide/index.mdx?plain=1","tags":[],"version":"current","frontMatter":{"description":"Porting guide made for Zombie Escape maps","title":"Porting Guide"},"sidebar":"tutorialSidebar","previous":{"title":"Source 2 Zombie Escape (S2ZE)","permalink":"/CommunityGuides/s2ze/"},"next":{"title":"Mandatory Works","permalink":"/CommunityGuides/s2ze/PortingGuide/MandatoryWorks/"}}');var o=n(74848),r=n(28453),s=n(14795);const c={description:"Porting guide made for Zombie Escape maps",title:"Porting Guide"},a=void 0,l={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Sections",id:"sections",level:2}];function d(e){const t={a:"a",admonition:"admonition",h2:"h2",p:"p",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(t.p,{children:["This porting guide provides useful information when porting a Zombie Escape map from CS",":GO"," to CS2. It covers procedures to follow when porting the map, suggests workarounds for potential pitfalls, provides guidance on implementing new Source 2 features, and more."]}),"\n",(0,o.jsx)(t.p,{children:"Although this guide was written primarily for the Zombie Escape gamemode, it is versatile enough to be used and implemented for other gamemodes. Similarly, the guide can be useful for a general porting process from Source 1 to Source 2."}),"\n",(0,o.jsx)(t.p,{children:"The wiki is set up in an order of recommended steps to take when porting a map from scratch, but it can be freely used as a wiki."}),"\n",(0,o.jsx)(t.admonition,{title:"Legacy",type:"note",children:(0,o.jsxs)(t.p,{children:["Our previous implementation of the guide can be found ",(0,o.jsx)(t.a,{href:"https://docs.google.com/document/d/1buKzjP-2com9GcXVxCfyRBi6sDiKmzMoVy9RNbYQqIo",children:"here"}),"."]})}),"\n",(0,o.jsx)(t.h2,{id:"sections",children:"Sections"}),"\n","\n",(0,o.jsx)(s.A,{})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var i=n(96540);const o={},r=i.createContext(o);function s(e){const t=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),i.createElement(r.Provider,{value:t},e.children)}},53465:(e,t,n)=>{n.d(t,{W:()=>l});var i=n(96540),o=n(44586);const r=["zero","one","two","few","many","other"];function s(e){return r.filter(t=>e.includes(t))}const c={locale:"en",pluralForms:s(["one","other"]),select:e=>1===e?"one":"other"};function a(){const{i18n:{currentLocale:e}}=(0,o.A)();return(0,i.useMemo)(()=>{try{return function(e){const t=new Intl.PluralRules(e);return{locale:e,pluralForms:s(t.resolvedOptions().pluralCategories),select:e=>t.select(e)}}(e)}catch(t){return console.error(`Failed to use Intl.PluralRules for locale "${e}".\nDocusaurus will fallback to the default (English) implementation.\nError: ${t.message}\n`),c}},[e])}function l(){const e=a();return{selectMessage:(t,n)=>function(e,t,n){const i=e.split("|");if(1===i.length)return i[0];i.length>n.pluralForms.length&&console.error(`For locale=${n.locale}, a maximum of ${n.pluralForms.length} plural forms are expected (${n.pluralForms.join(",")}), but the message contains ${i.length}: ${e}`);const o=n.select(t),r=n.pluralForms.indexOf(o);return i[Math.min(r,i.length-1)]}(n,t,e)}}}}]);