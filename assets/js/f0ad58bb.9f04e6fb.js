"use strict";(self.webpackChunksource_2_wiki=self.webpackChunksource_2_wiki||[]).push([[17169],{28453:(e,t,n)=>{n.d(t,{R:()=>d,x:()=>c});var i=n(96540);const r={},s=i.createContext(r);function d(e){const t=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:d(e.components),i.createElement(s.Provider,{value:t},e.children)}},87908:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"Scripting/Counter-Strike 2/cs_script/functionList","title":"List of script functions","description":"This page is a list of all classes, functions and utils offered by the cs_script API in","source":"@site/docs/Scripting/Counter-Strike 2/cs_script/2-functionList.mdx","sourceDirName":"Scripting/Counter-Strike 2/cs_script","slug":"/Scripting/Counter-Strike 2/cs_script/functionList","permalink":"/Scripting/Counter-Strike 2/cs_script/functionList","draft":false,"unlisted":false,"editUrl":"https://github.com/Source2Wiki/Source2Wiki/blob/master/docs/Scripting/Counter-Strike 2/cs_script/2-functionList.mdx?plain=1","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Intro to cs_script","permalink":"/Scripting/Counter-Strike 2/cs_script/introduction"},"next":{"title":"External Tools","permalink":"/ExternalTools/"}}');var r=n(74848),s=n(28453);const d={},c="List of script functions",l={},o=[{value:"Instance",id:"instance",level:2}];function a(e){const t={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components},{Game:n,Tool:i}=t;return n||x("Game",!0),i||x("Tool",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"list-of-script-functions",children:"List of script functions"})}),"\n",(0,r.jsxs)(t.p,{children:["This page is a list of all classes, functions and utils offered by the cs_script API in ",(0,r.jsx)(n,{name:"cs2"})]}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["Valve has released a ",(0,r.jsx)(i,{name:"ts"})," file defining the current API along side the zoo map, it can be found at ",(0,r.jsx)(t.code,{children:"Steam\\steamapps\\common\\Counter-Strike Global Offensive\\content\\csgo\\maps\\editor\\zoo\\scripts\\types\\point_script.d.ts"})]})}),"\n",(0,r.jsx)(t.h2,{id:"instance",children:"Instance"}),"\n",(0,r.jsx)(t.p,{children:"The top level API provided to scripts attached to a point_script entity."}),"\n",(0,r.jsx)(t.p,{children:'Access these functions by importing Instance from "cs_script/point_script".'}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Function"}),(0,r.jsx)(t.th,{children:"Signature"}),(0,r.jsx)(t.th,{children:"Description"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Msg"}),(0,r.jsx)(t.td,{children:"Msg(text: string): void;"}),(0,r.jsx)(t.td,{children:"Log a message to the console."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"DebugScreenText"}),(0,r.jsx)(t.td,{children:"DebugScreenText(text: string, x: number, y: number, duration: number, color: Color): void;"}),(0,r.jsx)(t.td,{children:"Print some text to the game window."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"DebugSphere"}),(0,r.jsx)(t.td,{children:"DebugSphere(center: Vector, radius: number, duration: number, color: Color): void;"}),(0,r.jsx)(t.td,{children:"Draw a wire spehere in the world."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"OnBeforeReload"}),(0,r.jsx)(t.td,{children:"OnBeforeReload(callback: () => any): void;"}),(0,r.jsx)(t.td,{children:"Called in Tools mode before the script is reloaded due to changes. A returned value will be passed to the OnReload callback."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"OnReload"}),(0,r.jsx)(t.td,{children:"OnReload(callback: (memory: any) => void): void;"}),(0,r.jsx)(t.td,{children:"Called in Tools mode after the script reloaded due to changes while."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"OnActivate"}),(0,r.jsx)(t.td,{children:"OnActivate(callback: () => void): void;"}),(0,r.jsx)(t.td,{children:"Called when the point_script entity is activated"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"OnGameEvent<E extends keyof GameEventDefs>"}),(0,r.jsx)(t.td,{children:"OnGameEvent<E extends keyof GameEventDefs>(eventName: E, callback: (args: GameEventDefs[E]) => void): void;"}),(0,r.jsx)(t.td,{children:"Called when known game events are fired. See GameEventDefs for list of known game events."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"OnScriptInput"}),(0,r.jsx)(t.td,{children:"OnScriptInput(name: string, callback: (context: EntIOContext) => void): void;"}),(0,r.jsx)(t.td,{children:"Called input RunScriptInput is triggered on the point_script entity with a value that matches."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"SetThink"}),(0,r.jsx)(t.td,{children:"SetThink(callback: () => void): void;"}),(0,r.jsx)(t.td,{children:"Called per-think"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"SetNextThink"}),(0,r.jsx)(t.td,{children:"SetNextThink(time: number): void;"}),(0,r.jsx)(t.td,{children:"Set when the think callback should next be called"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"EntFireAtName"}),(0,r.jsx)(t.td,{children:"EntFireAtName(name: string, input: string, value?: EntIOValue, delay?: number): void;"}),(0,r.jsx)(t.td,{children:"Fire the input on all targets matching the specified name."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"EntFireAtTarget"}),(0,r.jsx)(t.td,{children:"EntFireAtTarget(target: Entity, input: string, value?: EntIOValue, delay?: number): void;"}),(0,r.jsx)(t.td,{children:"Fire the input on the specified target."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ConnectOutput"}),(0,r.jsx)(t.td,{children:"ConnectOutput(target: Entity, output: string, callback: (arg: EntIOValue, context: EntIOContext) => any): number | undefined;"}),(0,r.jsxs)(t.td,{children:["Connect the output of an entity to a callback. The return value is a connection id that can be used in ",(0,r.jsx)(t.code,{children:"DisconnectOutput"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"DisconnectOutput"}),(0,r.jsx)(t.td,{children:"DisconnectOutput(connectionId: number): void;"}),(0,r.jsx)(t.td,{children:"Find entities by name."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"FindEntityByName"}),(0,r.jsx)(t.td,{children:"FindEntityByName(name: string): Entity | undefined;"}),(0,r.jsx)(t.td,{children:"Find the first entity matching the specified name."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"FindEntitiesByName"}),(0,r.jsx)(t.td,{children:"FindEntitiesByName(name: string): Entity[];"}),(0,r.jsx)(t.td,{children:"Find entities matching the specified name."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"FindEntityByClass"}),(0,r.jsx)(t.td,{children:"FindEntityByClass(className: string): Entity | undefined;"}),(0,r.jsx)(t.td,{children:"Find the first entity of the specified class name."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"FindEntitiesByClass"}),(0,r.jsx)(t.td,{children:"FindEntitiesByClass(className: string): Entity[];"}),(0,r.jsx)(t.td,{children:"Find entities of the specified class name."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"GetPlayerController"}),(0,r.jsx)(t.td,{children:"GetPlayerController(slot: number): CSPlayerController | undefined;"}),(0,r.jsx)(t.td,{children:"Get the player controller in the given slot."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"GetTraceHit"}),(0,r.jsx)(t.td,{children:"GetTraceHit(start: Vector, end: Vector, config?: TraceConfig): TraceResult;"}),(0,r.jsx)(t.td,{children:"Trace along a line and detect collisions"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"GetGameTime"}),(0,r.jsx)(t.td,{children:"GetGameTime(): number;"}),(0,r.jsx)(t.td,{children:"Get the game time in seconds."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"IsWarmupPeriod"}),(0,r.jsx)(t.td,{children:"IsWarmupPeriod(): boolean;"}),(0,r.jsx)(t.td,{children:"Get if the game is currently in a Warmup period."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"GetGameType"}),(0,r.jsx)(t.td,{children:"GetGameType(): number;"}),(0,r.jsx)(t.td,{children:"Get the current Game Type."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"GetGameMode"}),(0,r.jsx)(t.td,{children:"GetGameMode(): number;"}),(0,r.jsx)(t.td,{children:"Get the current Game Mode."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"GetMapName"}),(0,r.jsx)(t.td,{children:"GetMapName(): string;"}),(0,r.jsx)(t.td,{children:"Get the name of the current map."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"GetRoundsPlayed"}),(0,r.jsx)(t.td,{children:"GetRoundsPlayed(): number;"}),(0,r.jsx)(t.td,{children:"Get the number of rounds played in the current game."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ClientCommand"}),(0,r.jsx)(t.td,{children:"ClientCommand(slot: number, command: string): void;"}),(0,r.jsx)(t.td,{children:"Issue the specified command to the specified client."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"ServerCommand"}),(0,r.jsx)(t.td,{children:"ServerCommand(command: string): void;"}),(0,r.jsx)(t.td,{children:"Issue a command."})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}function x(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);