"use strict";(self.webpackChunksource_2_wiki=self.webpackChunksource_2_wiki||[]).push([[17169],{28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>s});var r=n(96540);const i={},d=r.createContext(i);function l(e){const t=r.useContext(d);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(d.Provider,{value:t},e.children)}},87908:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"Scripting/Counter-Strike 2/cs_script/functionList","title":"API documentation","description":"This page is a list of all functions, interfaces, types, and enums offered by the cs_script API in Counter-Strike 2.","source":"@site/docs/Scripting/Counter-Strike 2/cs_script/2-functionList.mdx","sourceDirName":"Scripting/Counter-Strike 2/cs_script","slug":"/Scripting/Counter-Strike 2/cs_script/functionList","permalink":"/Scripting/Counter-Strike 2/cs_script/functionList","draft":false,"unlisted":false,"editUrl":"https://github.com/Source2Wiki/Source2Wiki/blob/master/docs/Scripting/Counter-Strike 2/cs_script/2-functionList.mdx?plain=1","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"API documentation","description":"This page is a list of all functions, interfaces, types, and enums offered by the cs_script API in Counter-Strike 2."},"sidebar":"tutorialSidebar","previous":{"title":"Intro to cs_script","permalink":"/Scripting/Counter-Strike 2/cs_script/introduction"},"next":{"title":"Script Examples","permalink":"/Scripting/Counter-Strike 2/cs_script/examples/"}}');var i=n(74848),d=n(28453);const l={title:"API documentation",description:"This page is a list of all functions, interfaces, types, and enums offered by the cs_script API in Counter-Strike 2."},s="API documentation",c={},a=[{value:"Functions",id:"functions",level:2},{value:"Instance",id:"instance",level:3},{value:"Deprecated",id:"deprecated",level:4},{value:"Events",id:"events",level:4},{value:"Entity",id:"entity",level:3},{value:"BaseModelEntity",id:"basemodelentity",level:3},{value:"CSWeaponBase",id:"csweaponbase",level:3},{value:"CSWeaponData",id:"csweapondata",level:3},{value:"CSPlayerController",id:"csplayercontroller",level:3},{value:"CSObserverPawn",id:"csobserverpawn",level:3},{value:"CSPlayerPawn",id:"csplayerpawn",level:3},{value:"PointTemplate",id:"pointtemplate",level:3},{value:"Types",id:"types",level:2},{value:"Vector",id:"vector",level:3},{value:"QAngle",id:"qangle",level:3},{value:"Color",id:"color",level:3},{value:"InputValue",id:"inputvalue",level:3},{value:"BeforeDamageResult",id:"beforedamageresult",level:3},{value:"Interfaces",id:"interfaces",level:2},{value:"TraceResult",id:"traceresult",level:3},{value:"BulletTrace",id:"bullettrace",level:3},{value:"BulletTraceResult",id:"bullettraceresult",level:3},{value:"enums",id:"enums",level:2},{value:"CSWeaponType",id:"csweapontype",level:3},{value:"CSGearSlot",id:"csgearslot",level:3},{value:"TraceInteracts",id:"traceinteracts",level:3}];function o(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,d.R)(),...e.components},{Game:n,Tool:r}=t;return n||x("Game",!0),r||x("Tool",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"api-documentation",children:"API documentation"})}),"\n",(0,i.jsxs)(t.p,{children:["This page is a list of all functions, interfaces, types, and enums offered by the cs_script API in ",(0,i.jsx)(n,{name:"cs2"})]}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["Valve has released a ",(0,i.jsx)(r,{name:"ts"})," file defining the current API along side the zoo map, it can be found at ",(0,i.jsx)(t.code,{children:"Steam\\steamapps\\common\\Counter-Strike Global Offensive\\content\\csgo\\maps\\editor\\zoo\\scripts\\types\\point_script.d.ts"})]})}),"\n",(0,i.jsx)(t.h2,{id:"functions",children:"Functions"}),"\n",(0,i.jsx)(t.h3,{id:"instance",children:"Instance"}),"\n",(0,i.jsx)(t.p,{children:"The top level API provided to scripts attached to a point_script entity."}),"\n",(0,i.jsx)(t.p,{children:'Access these functions by importing Instance from "cs_script/point_script".'}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Function"}),(0,i.jsx)(t.th,{children:"Signature"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Msg"}),(0,i.jsx)(t.td,{children:"Msg(text: any): void;"}),(0,i.jsx)(t.td,{children:"Log a message to the console."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DebugScreenText"}),(0,i.jsx)(t.td,{children:"DebugScreenText(config: { text: any, x: number, y: number, duration?: number, color?: Color }): void;"}),(0,i.jsx)(t.td,{children:"Print some text to the game window. Only works in dev environments."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DebugLine"}),(0,i.jsx)(t.td,{children:"DebugLine(config: { start: Vector, end: Vector, duration?: number, color?: Color }): void;"}),(0,i.jsx)(t.td,{children:"Draw a line in the world. Only works in dev environments."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DebugSphere"}),(0,i.jsx)(t.td,{children:"DebugSphere(config: { center: Vector, radius: number, duration?: number, color?: Color }): void;"}),(0,i.jsx)(t.td,{children:"Draw a wire sphere in the world. Only works in dev environments."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DebugBox"}),(0,i.jsx)(t.td,{children:"DebugBox(config: { mins: Vector, maxs: Vector, duration?: number, color?: Color }): void;"}),(0,i.jsx)(t.td,{children:"Draw an axis aligned box in the world. Only works in dev environments."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"SetThink"}),(0,i.jsx)(t.td,{children:"SetThink(callback: () => void): void;"}),(0,i.jsx)(t.td,{children:"Called per-think. Control when this is run using SetNextThink."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"SetNextThink"}),(0,i.jsx)(t.td,{children:"SetNextThink(time: number): void;"}),(0,i.jsx)(t.td,{children:"Set when the OnThink callback should next be run. The exact time will be on the tick nearest to the specified time, which may be earlier or later."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"EntFireAtName"}),(0,i.jsx)(t.td,{children:"EntFireAtName(config: { name: string, input: string, value?: InputValue, caller?: Entity, activator?: Entity, delay?: number }): void;"}),(0,i.jsx)(t.td,{children:"Fire the input on all targets matching the specified names."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"EntFireAtTarget"}),(0,i.jsx)(t.td,{children:"EntFireAtTarget(config: { target: Entity, input: string, value?: InputValue, caller?: Entity, activator?: Entity, delay?: number }): void;"}),(0,i.jsx)(t.td,{children:"Fire the input on the specified target."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"ConnectOutput"}),(0,i.jsx)(t.td,{children:"ConnectOutput(target: Entity, output: string, callback: (inputData: { value?: InputValue, caller?: Entity, activator?: Entity }) => any): number | undefined;"}),(0,i.jsxs)(t.td,{children:["Connect the output of an entity to a callback. The return value is a connection id that can be used in ",(0,i.jsx)(t.code,{children:"DisconnectOutput"})]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DisconnectOutput"}),(0,i.jsx)(t.td,{children:"DisconnectOutput(connectionId: number): void;"}),(0,i.jsx)(t.td,{children:"Find entities by name."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"FindEntityByName"}),(0,i.jsx)(t.td,{children:"FindEntityByName(name: string): Entity | undefined;"}),(0,i.jsx)(t.td,{children:"Find the first entity matching the specified name."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"FindEntitiesByName"}),(0,i.jsx)(t.td,{children:"FindEntitiesByName(name: string): Entity[];"}),(0,i.jsx)(t.td,{children:"Find entities matching the specified name."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"FindEntityByClass"}),(0,i.jsx)(t.td,{children:"FindEntityByClass(className: string): Entity | undefined;"}),(0,i.jsx)(t.td,{children:"Find the first entity of the specified class name."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"FindEntitiesByClass"}),(0,i.jsx)(t.td,{children:"FindEntitiesByClass(className: string): Entity[];"}),(0,i.jsx)(t.td,{children:"Find entities of the specified class name."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetPlayerController"}),(0,i.jsx)(t.td,{children:"GetPlayerController(playerSlot: number): CSPlayerController | undefined;"}),(0,i.jsx)(t.td,{children:"Get the player controller in the given slot."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"TraceLine"}),(0,i.jsx)(t.td,{children:"TraceLine(trace: { start: Vector, end: Vector, ignoreEntity?: Entity, ignorePlayers?: boolean }): TraceResult;"}),(0,i.jsx)(t.td,{children:"Trace a point along a line and detect collisions"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"TraceSphere"}),(0,i.jsx)(t.td,{children:"TraceSphere(trace: { start: Vector, end: Vector, radius: number, ignoreEntity?: Entity, ignorePlayers?: boolean }): TraceResult;"}),(0,i.jsx)(t.td,{children:"Trace a sphere along a line and detect collisions"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"TraceBox"}),(0,i.jsx)(t.td,{children:"TraceBox(trace: { start: Vector, end: Vector, mins: Vector, maxs: Vector, ignoreEntity?: Entity, ignorePlayers?: boolean }): TraceResult;"}),(0,i.jsx)(t.td,{children:"Trace an axis aligned bounding box along a line and detect collisions"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"TraceBullet"}),(0,i.jsx)(t.td,{children:"TraceBullet(trace: BulletTrace): BulletTraceResult[];"}),(0,i.jsx)(t.td,{children:"Trace as a bullet and detect hits and damage"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetGameTime"}),(0,i.jsx)(t.td,{children:"GetGameTime(): number;"}),(0,i.jsx)(t.td,{children:"Get the game time in seconds."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"IsWarmupPeriod"}),(0,i.jsx)(t.td,{children:"IsWarmupPeriod(): boolean;"}),(0,i.jsx)(t.td,{children:"Get if the game is currently in a Warmup period."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"IsFreezePeriod"}),(0,i.jsx)(t.td,{children:"IsFreezePeriod(): boolean;"}),(0,i.jsx)(t.td,{children:"Get if the game is currently in a Freeze period."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetGameType"}),(0,i.jsx)(t.td,{children:"GetGameType(): number;"}),(0,i.jsx)(t.td,{children:"Get the current Game Type."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetGameMode"}),(0,i.jsx)(t.td,{children:"GetGameMode(): number;"}),(0,i.jsx)(t.td,{children:"Get the current Game Mode."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetMapName"}),(0,i.jsx)(t.td,{children:"GetMapName(): string;"}),(0,i.jsx)(t.td,{children:"Get the name of the current map."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetRoundsPlayed"}),(0,i.jsx)(t.td,{children:"GetRoundsPlayed(): number;"}),(0,i.jsx)(t.td,{children:"Get the number of rounds played in the current game."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"ClientCommand"}),(0,i.jsx)(t.td,{children:"ClientCommand(playerSlot: number, command: string): void;"}),(0,i.jsx)(t.td,{children:"Issue the specified command to the specified client."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"ServerCommand"}),(0,i.jsx)(t.td,{children:"ServerCommand(command: string): void;"}),(0,i.jsx)(t.td,{children:"Issue a command."})]})]})]}),"\n",(0,i.jsx)(t.h4,{id:"deprecated",children:"Deprecated"}),"\n",(0,i.jsx)(t.p,{children:"These overloads will be removed in a future update"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Function"}),(0,i.jsx)(t.th,{children:"Signature"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnBeforeReload"}),(0,i.jsx)(t.td,{children:"OnBeforeReload(callback: () => any): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnReload"}),(0,i.jsx)(t.td,{children:"OnReload(callback: (memory: any) => void): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DebugScreenText"}),(0,i.jsx)(t.td,{children:"DebugScreenText(text: any, x: number, y: number, duration: number, color: Color): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DebugLine"}),(0,i.jsx)(t.td,{children:"DebugLine(start: Vector, end: Vector, duration: number, color: Color): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DebugBox"}),(0,i.jsx)(t.td,{children:"DebugBox(mins: Vector, maxs: Vector, duration: number, color: Color): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DebugSphere"}),(0,i.jsx)(t.td,{children:"DebugSphere(center: Vector, radius: number, duration: number, color: Color): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetTraceHit"}),(0,i.jsx)(t.td,{children:"GetTraceHit(start: Vector, end: Vector, config?: { ignoreEntity?: Entity, ignorePlayers?: boolean }): TraceResult;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"EntFireAtName"}),(0,i.jsx)(t.td,{children:"EntFireAtName(name: string, input: string, inputData?: InputValue | { value?: InputValue, caller?: Entity, activator?: Entity }, delay?: number): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"EntFireAtTarget"}),(0,i.jsx)(t.td,{children:"EntFireAtTarget(target: Entity, input: string, inputData?: InputValue | { value?: InputValue, caller?: Entity, activator?: Entity }, delay?: number): void;"}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.h4,{id:"events",children:"Events"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Function"}),(0,i.jsx)(t.th,{children:"Signature"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnActivate"}),(0,i.jsx)(t.td,{children:"OnActivate(callback: () => void): void;"}),(0,i.jsx)(t.td,{children:"Called when the point_script entity is activated"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnScriptInput"}),(0,i.jsx)(t.td,{children:"OnScriptInput(name: string, callback: (inputData: { caller?: Entity, activator?: Entity }) => void): void;"}),(0,i.jsx)(t.td,{children:"Called when input RunScriptInput is triggered on the point_script entity with a parameter value that matches name."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnPlayerConnect"}),(0,i.jsx)(t.td,{children:"OnPlayerConnect(callback: (event: { player: CSPlayerController }) => void): void;"}),(0,i.jsx)(t.td,{children:"Called when a client finishes the initial connection handshake with the server."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnPlayerActivate"}),(0,i.jsx)(t.td,{children:"OnPlayerActivate(callback: (event: { player: CSPlayerController }) => void): void;"}),(0,i.jsx)(t.td,{children:"Called when a client finishes loading and is ready to spawn."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnPlayerDisconnect"}),(0,i.jsx)(t.td,{children:"OnPlayerDisconnect(callback: (event: { playerSlot: number }) => void): void;"}),(0,i.jsx)(t.td,{children:"Called when a client disconnects from the server."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnPlayerReset"}),(0,i.jsx)(t.td,{children:"OnPlayerReset(callback: (event: { player: CSPlayerPawn }) => void): void"}),(0,i.jsx)(t.td,{children:"Called when a player respawns, changes team, or is placed back at spawn due to a round restart"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnRoundStart"}),(0,i.jsx)(t.td,{children:"OnRoundStart(callback: () => void): void;"}),(0,i.jsx)(t.td,{children:"Called when a new round begins"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnRoundEnd"}),(0,i.jsx)(t.td,{children:"OnRoundEnd(callback: (event: { winningTeam: number }) => void): void;"}),(0,i.jsx)(t.td,{children:"Called when a team wins a round"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnBombPlant"}),(0,i.jsx)(t.td,{children:"OnBombPlant(callback: (event: { plantedC4: Entity, planter: CSPlayerPawn }) => void): void;"}),(0,i.jsx)(t.td,{children:"Called when a player plants the c4"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnBombDefuse"}),(0,i.jsx)(t.td,{children:"OnBombDefuse(callback: (event: { plantedC4: Entity, defuser: CSPlayerPawn }) => void): void;"}),(0,i.jsx)(t.td,{children:"Called when a player defuses the c4"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnBeforePlayerDamage"}),(0,i.jsx)(t.td,{children:"OnBeforePlayerDamage(callback: (event: { player: CSPlayerPawn, damage: number, inflictor?: Entity, attacker?: Entity, weapon?: CSWeaponBase }) => BeforeDamageResult): void;"}),(0,i.jsxs)(t.td,{children:["Called when a CSPlayerPawn is about to take damage ",(0,i.jsx)("br",{}),"@param callback ",(0,i.jsx)("br",{}),"Return ",(0,i.jsx)(t.code,{children:"\\{ damage: N \\}"})," to modify the amount of damage. Armor and hitgroup modifications will be applied to this new value. ",(0,i.jsx)("br",{}),"Return ",(0,i.jsx)(t.code,{children:"\\{ aborted: true \\}"})," to cancel the damage event."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnPlayerDamage"}),(0,i.jsx)(t.td,{children:"OnPlayerDamage(callback: (event: { player: CSPlayerPawn, damage: number, inflictor?: Entity, attacker?: Entity, weapon?: CSWeaponBase }) => void): void;"}),(0,i.jsxs)(t.td,{children:["Called when a player has taken damage. ",(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"player"})," is the victim that has taken damage. ",(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"damage"})," is the actual health lost after armor and hitgroup modifications. ",(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"inflictor"})," is the entity applying the damage. For bullets this is the owner of the gun. For grenades this is the exploding projectile. ",(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"attacker"})," is the entity credited with causing the damage. For bullets this is the shooter. For grenades this is the thrower. ",(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"weapon"})," is the weapon used. For grenades this will not be present because the weapon is often removed before the projectile explodes."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnPlayerKill"}),(0,i.jsx)(t.td,{children:"OnPlayerKill(callback: (event: { player: CSPlayerPawn, inflictor?: Entity, attacker?: Entity, weapon?: CSWeaponBase }) => void): void;"}),(0,i.jsxs)(t.td,{children:["Called when a player dies. ",(0,i.jsx)(t.code,{children:"inflictor"}),", ",(0,i.jsx)(t.code,{children:"attacker"})," and ",(0,i.jsx)(t.code,{children:"weapon"})," will match the damage event that caused the kill."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnPlayerJump"}),(0,i.jsx)(t.td,{children:"OnPlayerJump(callback: (event: { player: CSPlayerPawn }) => void): void;"}),(0,i.jsx)(t.td,{children:"Called when a player jumps off the ground."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnPlayerLand"}),(0,i.jsx)(t.td,{children:"OnPlayerLand(callback: (event: { player: CSPlayerPawn }) => void): void;"}),(0,i.jsx)(t.td,{children:"Called when a player lands on the ground."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnPlayerChat"}),(0,i.jsx)(t.td,{children:"OnPlayerChat(callback: (event: { player: CSPlayerController | undefined, text: string, team: number }) => void): void;"}),(0,i.jsxs)(t.td,{children:["Called when a player sends a chat message. ",(0,i.jsx)(t.code,{children:"team"})," will match they player's team if the message was sent to team chat."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnPlayerPing"}),(0,i.jsx)(t.td,{children:"OnPlayerPing(callback: (event: { player: CSPlayerController, position: Vector }) => void): void;"}),(0,i.jsx)(t.td,{children:"Called when a player pings a location."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnGunReload"}),(0,i.jsx)(t.td,{children:"OnGunReload(callback: (event: { weapon: CSWeaponBase }) => void): void;"}),(0,i.jsx)(t.td,{children:"Called when a gun is reloaded."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnGunFire"}),(0,i.jsx)(t.td,{children:"OnGunFire(callback: (event: { weapon: CSWeaponBase }) => void): void;"}),(0,i.jsx)(t.td,{children:"Called when a gun emits bullets. A shotgun will only trigger this once when emitting multiple bullets at once."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnBulletImpact"}),(0,i.jsx)(t.td,{children:"OnBulletImpact(callback: (event: { weapon: CSWeaponBase, position: Vector }) => void): void;"}),(0,i.jsx)(t.td,{children:"Called when a bullet hits a surface. This will trigger for each bullet and for each impact. Penetrations can cause a single bullet to trigger multiple impacts."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnGrenadeThrow"}),(0,i.jsx)(t.td,{children:"OnGrenadeThrow(callback: (event: { weapon: CSWeaponBase, projectile: Entity }) => void): void;"}),(0,i.jsxs)(t.td,{children:["Called when a grenade is thrown. ",(0,i.jsx)(t.code,{children:"projectile"})," is the newly created grenade projectile."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnGrenadeBounce"}),(0,i.jsx)(t.td,{children:"OnGrenadeBounce(callback: (event: { projectile: Entity, bounces: number }) => void): void;"}),(0,i.jsxs)(t.td,{children:["Called when a grenade bounces off a surface. ",(0,i.jsx)(t.code,{children:"bounces"})," is the number of bounces so far."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"OnKnifeAttack"}),(0,i.jsx)(t.td,{children:"OnKnifeAttack(callback: (event: { weapon: CSWeaponBase }) => void): void;"}),(0,i.jsx)(t.td,{children:"Called when a knife attacks, even if it misses."})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"entity",children:"Entity"}),"\n",(0,i.jsx)(t.p,{children:"API for all entities."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Function"}),(0,i.jsx)(t.th,{children:"Signature"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"IsValid"}),(0,i.jsx)(t.td,{children:"IsValid(): boolean;"}),(0,i.jsxs)(t.td,{children:["Returns ",(0,i.jsx)(t.code,{children:"false"})," if the entity has been deleted."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetAbsOrigin"}),(0,i.jsx)(t.td,{children:"GetAbsOrigin(): Vector;"}),(0,i.jsx)(t.td,{children:"The position of the origin of this entity relative to the world."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetLocalOrigin"}),(0,i.jsx)(t.td,{children:"GetLocalOrigin(): Vector;"}),(0,i.jsx)(t.td,{children:"The position of the origin of this entity relative to its parent. Will be relative to the world if no parent."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetAbsAngles"}),(0,i.jsx)(t.td,{children:"GetAbsAngles(): QAngle;"}),(0,i.jsx)(t.td,{children:"The angles [pitch, yaw, and roll] of this entity relative to the world."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetLocalAngles"}),(0,i.jsx)(t.td,{children:"GetLocalAngles(): QAngle;"}),(0,i.jsx)(t.td,{children:"The angles [pitch, yaw, and roll] of this entity relative to its parent. Will be relative to the world if no parent."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetAbsVelocity"}),(0,i.jsx)(t.td,{children:"GetAbsVelocity(): Vector;"}),(0,i.jsx)(t.td,{children:"The velocity of this entity relative to the world."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetLocalVelocity"}),(0,i.jsx)(t.td,{children:"GetLocalVelocity(): Vector;"}),(0,i.jsx)(t.td,{children:"The velocity of this entity relative to its parent. Will be relative to the world if no parent."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetEyeAngles"}),(0,i.jsx)(t.td,{children:"GetEyeAngles(): QAngle;"}),(0,i.jsx)(t.td,{children:"The angles of the eyes of this entity relative to the world."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetEyePosition"}),(0,i.jsx)(t.td,{children:"GetEyePosition(): Vector;"}),(0,i.jsx)(t.td,{children:"The position of the eyes of this entity relative to the world"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Teleport"}),(0,i.jsx)(t.td,{children:"Teleport(newValues: { position?: Vector, angles?: QAngle, velocity?: Vector }): void;"}),(0,i.jsx)(t.td,{children:"Update the physics state of this entity."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetClassName"}),(0,i.jsx)(t.td,{children:"GetClassName(): string;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetEntityName"}),(0,i.jsx)(t.td,{children:"GetEntityName(): string;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"SetEntityName"}),(0,i.jsx)(t.td,{children:"SetEntityName(name: string): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetOwner"}),(0,i.jsx)(t.td,{children:"GetOwner(): Entity | undefined;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"SetOwner"}),(0,i.jsx)(t.td,{children:"SetOwner(owner: Entity | undefined): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetParent"}),(0,i.jsx)(t.td,{children:"GetParent(): Entity | undefined;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"SetParent"}),(0,i.jsx)(t.td,{children:"SetParent(parent: Entity | undefined): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetTeamNumber"}),(0,i.jsx)(t.td,{children:"GetTeamNumber(): number;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetHealth"}),(0,i.jsx)(t.td,{children:"GetHealth(): number;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"SetHealth"}),(0,i.jsx)(t.td,{children:"SetHealth(health: number): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetMaxHealth"}),(0,i.jsx)(t.td,{children:"GetMaxHealth(): number;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"SetMaxHealth"}),(0,i.jsx)(t.td,{children:"SetMaxHealth(health: number): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"IsAlive"}),(0,i.jsx)(t.td,{children:"IsAlive(): boolean;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"IsWorld"}),(0,i.jsx)(t.td,{children:"IsWorld(): boolean;"}),(0,i.jsx)(t.td,{children:"Get if this is the world entity"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetGroundEntity"}),(0,i.jsx)(t.td,{children:"GetGroundEntity(): Entity | undefined;"}),(0,i.jsxs)(t.td,{children:["Get the entity that this entity is resting on. Will be ",(0,i.jsx)(t.code,{children:"undefined"})," if in the air."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"TakeDamage"}),(0,i.jsx)(t.td,{children:"TakeDamage(takeDamage: { damage: number, inflictor?: Entity, attacker?: Entity, weapon?: CSWeaponBase }): number;"}),(0,i.jsx)(t.td,{children:"Apply damage to this entity. Damage value will be modified by armor and hitgroup."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Kill"}),(0,i.jsx)(t.td,{children:"Kill(): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Remove"}),(0,i.jsx)(t.td,{children:"Remove(): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Teleport"}),(0,i.jsx)(t.td,{children:"Teleport(newPosition: Vector | null, newAngles: QAngle | null, newVelocity: Vector | null): void;"}),(0,i.jsx)(t.td,{children:"deprecated"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"basemodelentity",children:"BaseModelEntity"}),"\n",(0,i.jsxs)(t.p,{children:["extends ",(0,i.jsx)(t.a,{href:"#entity",children:"Entity"})]}),"\n",(0,i.jsx)(t.p,{children:"API for all entities which have a model."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Function"}),(0,i.jsx)(t.th,{children:"Signature"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"SetModel"}),(0,i.jsx)(t.td,{children:"SetModel(modelName: string): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"SetModelScale"}),(0,i.jsx)(t.td,{children:"SetModelScale(scale: number): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"SetColor"}),(0,i.jsxs)(t.td,{children:["SetColor(color: ",(0,i.jsx)(t.a,{href:"#color",children:"Color"}),"): void;"]}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Glow"}),(0,i.jsxs)(t.td,{children:["Glow(color?: ",(0,i.jsx)(t.a,{href:"#color",children:"Color"}),"): void;"]}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"Unglow"}),(0,i.jsx)(t.td,{children:"Unglow(): void;"}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"csweaponbase",children:"CSWeaponBase"}),"\n",(0,i.jsxs)(t.p,{children:["extends ",(0,i.jsx)(t.a,{href:"#basemodelentity",children:"BaseModelEntity"})]}),"\n",(0,i.jsx)(t.p,{children:"API for all Counter-Strike weapons."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Function"}),(0,i.jsx)(t.th,{children:"Signature"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetData"}),(0,i.jsx)(t.td,{children:"GetData(): CSWeaponData;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetOwner"}),(0,i.jsx)(t.td,{children:"GetOwner(): CSPlayerPawn | undefined;"}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"csweapondata",children:"CSWeaponData"}),"\n",(0,i.jsx)(t.p,{children:"API for Counter-Strike weapon data."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Function"}),(0,i.jsx)(t.th,{children:"Signature"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetName"}),(0,i.jsx)(t.td,{children:"GetName(): string;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetType"}),(0,i.jsx)(t.td,{children:"GetType(): CSWeaponType;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetPrice"}),(0,i.jsx)(t.td,{children:"GetPrice(): number;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetDamage"}),(0,i.jsx)(t.td,{children:"GetDamage(): number; // Starting damage as the bullet travels"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetRange"}),(0,i.jsx)(t.td,{children:"GetRange(): number;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetRangeModifier"}),(0,i.jsx)(t.td,{children:"GetRangeModifier(): number; // Exponential damage drop off from traveling through air. nextDamage = currentDamage * rangeModifier ^ (distance / 500)."}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetPenetration"}),(0,i.jsx)(t.td,{children:"GetPenetration(): number; // Power to maintain damage during penetration"}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"csplayercontroller",children:"CSPlayerController"}),"\n",(0,i.jsxs)(t.p,{children:["extends ",(0,i.jsx)(t.a,{href:"#entity",children:"Entity"})]}),"\n",(0,i.jsx)(t.p,{children:"API for player controllers."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Function"}),(0,i.jsx)(t.th,{children:"Signature"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetPlayerSlot"}),(0,i.jsx)(t.td,{children:"GetPlayerSlot(): number;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetPlayerName"}),(0,i.jsx)(t.td,{children:"GetPlayerName(): string;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetPlayerPawn"}),(0,i.jsx)(t.td,{children:"GetPlayerPawn(): CSPlayerPawn | undefined;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetObserverPawn"}),(0,i.jsx)(t.td,{children:"GetObserverPawn(): CSObserverPawn | undefined;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetScore"}),(0,i.jsx)(t.td,{children:"GetScore(): number;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"AddScore"}),(0,i.jsx)(t.td,{children:"AddScore(points: number): void;"}),(0,i.jsx)(t.td,{children:"Add to the player's score. Negative values are allowed but the score will not go below zero."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetWeaponDataForLoadoutSlot"}),(0,i.jsx)(t.td,{children:"GetWeaponDataForLoadoutSlot(slot: number, team?: number): CSWeaponData | undefined;"}),(0,i.jsx)(t.td,{children:"Leave team as the default to use the player's current team."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"IsObserving"}),(0,i.jsx)(t.td,{children:"IsObserving(): boolean;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"IsBot"}),(0,i.jsx)(t.td,{children:"IsBot(): boolean;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"IsConnected"}),(0,i.jsx)(t.td,{children:"IsConnected(): boolean;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"JoinTeam"}),(0,i.jsx)(t.td,{children:"JoinTeam(team: number): void;"}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"csobserverpawn",children:"CSObserverPawn"}),"\n",(0,i.jsxs)(t.p,{children:["extends ",(0,i.jsx)(t.a,{href:"#basemodelentity",children:"BaseModelEntity"})]}),"\n",(0,i.jsx)(t.p,{children:"API for spectators."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Function"}),(0,i.jsx)(t.th,{children:"Signature"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetPlayerController"}),(0,i.jsx)(t.td,{children:"GetPlayerController(): CSPlayerController | undefined;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetOriginalPlayerController"}),(0,i.jsx)(t.td,{children:"GetOriginalPlayerController(): CSPlayerController;"}),(0,i.jsx)(t.td,{children:"Gets the controller that this player pawn was originally spawned for."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetObserverMode"}),(0,i.jsx)(t.td,{children:"GetObserverMode(): number;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"SetObserverMode"}),(0,i.jsx)(t.td,{children:"SetObserverMode(nMode: number): void;"}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"csplayerpawn",children:"CSPlayerPawn"}),"\n",(0,i.jsxs)(t.p,{children:["extends ",(0,i.jsx)(t.a,{href:"#basemodelentity",children:"BaseModelEntity"})]}),"\n",(0,i.jsx)(t.p,{children:"API for player pawns (the actual player in the world that the controller controls)."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Function"}),(0,i.jsx)(t.th,{children:"Signature"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetPlayerController"}),(0,i.jsx)(t.td,{children:"GetPlayerController(): CSPlayerController | undefined;"}),(0,i.jsx)(t.td,{children:"Gets the controller currently controlling this player pawn."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetOriginalPlayerController"}),(0,i.jsx)(t.td,{children:"GetOriginalPlayerController(): CSPlayerController;"}),(0,i.jsx)(t.td,{children:"Gets the controller that this player pawn was originally spawned for."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"FindWeapon"}),(0,i.jsx)(t.td,{children:"FindWeapon(name: string): CSWeaponBase | undefined;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"FindWeaponBySlot"}),(0,i.jsx)(t.td,{children:"FindWeaponBySlot(slot: CSGearSlot): CSWeaponBase | undefined;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetActiveWeapon"}),(0,i.jsx)(t.td,{children:"GetActiveWeapon(): CSWeaponBase | undefined;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DestroyWeapon"}),(0,i.jsx)(t.td,{children:"DestroyWeapon(target: CSWeaponBase): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DestroyWeapons"}),(0,i.jsx)(t.td,{children:"DestroyWeapons(): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"DropWeapon"}),(0,i.jsx)(t.td,{children:"DropWeapon(target: CSWeaponBase): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"SwitchToWeapon"}),(0,i.jsx)(t.td,{children:"SwitchToWeapon(target: CSWeaponBase): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GiveNamedItem"}),(0,i.jsx)(t.td,{children:"GiveNamedItem(name: string, autoDeploy?: boolean): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"GetArmor"}),(0,i.jsx)(t.td,{children:"GetArmor(): number;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"SetArmor"}),(0,i.jsx)(t.td,{children:"SetArmor(value: number): void;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"IsCrouching"}),(0,i.jsx)(t.td,{children:"IsCrouching(): boolean;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"IsCrouched"}),(0,i.jsx)(t.td,{children:"IsCrouched(): boolean;"}),(0,i.jsx)(t.td,{})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"IsNoclipping"}),(0,i.jsx)(t.td,{children:"IsNoclipping(): boolean;"}),(0,i.jsx)(t.td,{})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"pointtemplate",children:"PointTemplate"}),"\n",(0,i.jsxs)(t.p,{children:["extends ",(0,i.jsx)(t.a,{href:"#entity",children:"Entity"})]}),"\n",(0,i.jsxs)(t.p,{children:["API for ",(0,i.jsx)(t.a,{href:"/Entities/point_template",children:"point_template"})," entities."]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Function"}),(0,i.jsx)(t.th,{children:"Signature"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsx)(t.tbody,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"ForceSpawn"}),(0,i.jsxs)(t.td,{children:["ForceSpawn(origin?: ",(0,i.jsx)(t.a,{href:"#vector",children:"Vector"}),", angle?: ",(0,i.jsx)(t.a,{href:"#qangle",children:"QAngle"}),"): ",(0,i.jsx)(t.a,{href:"#entity",children:"Entity"}),"[] | undefined;"]}),(0,i.jsx)(t.td,{})]})})]}),"\n",(0,i.jsx)(t.h2,{id:"types",children:"Types"}),"\n",(0,i.jsx)(t.h3,{id:"vector",children:"Vector"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"type Vector = { x: number, y: number, z: number };\n"})}),"\n",(0,i.jsx)(t.h3,{id:"qangle",children:"QAngle"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"type QAngle = { pitch: number, yaw: number, roll: number };\n"})}),"\n",(0,i.jsx)(t.h3,{id:"color",children:"Color"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"type Color = { r: number, g: number, b: number, a?: number };\n"})}),"\n",(0,i.jsx)(t.h3,{id:"inputvalue",children:"InputValue"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"type InputValue = boolean | number | string | Vector | Color | undefined;\n"})}),"\n",(0,i.jsx)(t.h3,{id:"beforedamageresult",children:"BeforeDamageResult"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"type BeforeDamageResult = { damage?: number, abort?: boolean } | void;\n"})}),"\n",(0,i.jsx)(t.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,i.jsx)(t.h3,{id:"traceresult",children:"TraceResult"}),"\n",(0,i.jsx)(t.p,{children:"The resulting data from a trace."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"interface TraceResult {\n    fraction: number;\n    end: Vector;\n    didHit: boolean;\n    startedInSolid: boolean;\n    normal: Vector;\n    hitEntity?: Entity;\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"bullettrace",children:"BulletTrace"}),"\n",(0,i.jsx)(t.p,{children:"Traces a bullet."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"/**\n * Configuration object for `Instance.TraceBullet`\n * @example {damage:30, rangeModifer:.85, penetration:1} // Glock\n * @example {damage:30, rangeModifer:.45, penetration:1} // Mag-7\n * @example {damage:36, rangeModifier:.98, penetration:2} // AK47\n * @example {damage:115, rangeModifier:.99, penetration:2.5} // AWP\n */\ninterface BulletTrace {\n    start: Vector,\n    end: Vector,\n    /** The player shooting the bullet. Acts as `ignoreEnt` for traces. */\n    shooter: CSPlayerPawn,\n    /** The starting damage value of the bullet. This will reduce as it travels through the air and penetrates solids. @default 100 */\n    damage?: number,\n    /** The exponential damage drop off constant from traveling through air. @default .85 */\n    rangeModifier?: number,\n    /** The power to maintain damage during penetration. Will default to 1 if left unspecified. @default 1 */\n    penetration?: number,\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"bullettraceresult",children:"BulletTraceResult"}),"\n",(0,i.jsx)(t.p,{children:"The resulting data calculated from the fired bullet."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:"/**\n * Result entry for `Instance.TraceBullet`\n */\ninterface BulletTraceResult {\n    /** The entity hit by the bullet. This is not limited to players. */\n    hitEntity: Entity;\n    /** Damage value reduced by travel, before damage modification (body armor, headhshots, etc) */\n    damage: number;\n    position: Vector;\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"enums",children:"enums"}),"\n",(0,i.jsx)(t.h3,{id:"csweapontype",children:"CSWeaponType"}),"\n",(0,i.jsx)(t.p,{children:"Counter-Strike weapon types."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"KNIFE = 0"}),"\n",(0,i.jsx)(t.li,{children:"PISTOL = 1"}),"\n",(0,i.jsx)(t.li,{children:"SUBMACHINEGUN = 2"}),"\n",(0,i.jsx)(t.li,{children:"RIFLE = 3"}),"\n",(0,i.jsx)(t.li,{children:"SHOTGUN = 4"}),"\n",(0,i.jsx)(t.li,{children:"SNIPER_RIFLE = 5"}),"\n",(0,i.jsx)(t.li,{children:"MACHINEGUN = 6"}),"\n",(0,i.jsx)(t.li,{children:"C4 = 7"}),"\n",(0,i.jsx)(t.li,{children:"TASER = 8"}),"\n",(0,i.jsx)(t.li,{children:"GRENADE = 9"}),"\n",(0,i.jsx)(t.li,{children:"EQUIPMENT = 10"}),"\n",(0,i.jsx)(t.li,{children:"STACKABLEITEM = 11"}),"\n",(0,i.jsx)(t.li,{children:"UNKNOWN = 12"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"csgearslot",children:"CSGearSlot"}),"\n",(0,i.jsx)(t.p,{children:"Counter-Strike gear types."}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"INVALID = -1"}),"\n",(0,i.jsx)(t.li,{children:"RIFLE = 0"}),"\n",(0,i.jsx)(t.li,{children:"PISTOL = 1"}),"\n",(0,i.jsx)(t.li,{children:"KNIFE = 2"}),"\n",(0,i.jsx)(t.li,{children:"GRENADES = 3"}),"\n",(0,i.jsx)(t.li,{children:"C4 = 4"}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"traceinteracts",children:"TraceInteracts"}),"\n",(0,i.jsx)(t.p,{children:"What traces will interact with"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"SOLID = 0"}),"\n",(0,i.jsx)(t.li,{children:"WORLD = 1"}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}function x(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}}}]);